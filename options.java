package USACO;
import java.util.HashMap;

public class options {
	public void avgP (double strike, double price, double curr, int days) {
		double avg= 0.0;
		double perc = (strike-price)/curr;
		double logPerc = Math.log10(perc)/(double) days;
		avg = (double)100*(1.00-Math.pow(10.00, logPerc));
		System.out.println("for a long put with strike price $" + strike + " and at " + days + " days till expiration, and is currently trading at $" + price + " per share, with an underlying of $" + curr+", the underlying will have to drop an average of " + avg + "% a day");
	}
	
	public void avgC (double strike, double price, double curr, int days) {
		double avg= 0.0;
		double perc = (strike+price)/curr;
		double logPerc = Math.log10(perc)/(double) days;
		avg = (double)100*(1.00-Math.pow(10.00, logPerc));
		System.out.println("for a long call with strike price $" + strike + " and at " + days + " days till expiration, and is currently trading at $" + price + " per share, with an underlying of $" + curr+", the underlying will have to rise an average of " + avg + "% a day");
	}
	
	
	public double financials(double EBITDA, double rev, double mcap, double cash, double debt, double mult, double pEVEBITDA, double allEVEBITDA, double ps, double evs) {
		double fv = 0.0;
		double cashAdj = 0.0;
		double cashAdj1 = 0.0;


			double fv1 = ps*rev;
			double fv2 = evs*rev-debt*mult+cash;
			
			if(EBITDA>0) {
				double fv3 = EBITDA*pEVEBITDA;
				cashAdj = fv3-debt*mult+cash;
				fv = (fv1+fv2+fv3)/(double)3;
			}
			else {
				fv = (fv1+fv2)/(double)2;
			}
			
			double upside = fv-mcap;
			double percups = upside*100/mcap;
			double index  = percups+50;
			
		return index;
	}
	
	public double marg(double netmarg, double netmargmult) {
		double index = 50+netmarg-netmargmult;
		return index;
	}
	
	public double pricedin(double earn1, double earn2, double earn3, double rev1, double rev2, double rev3, double price1, double price2, double price3) {
		double index = 0.0;
		double percearn12 =(earn2-earn1)*100/earn1; 
		double percrev12 =(rev2-rev1)*100/rev1; 
		double percp12 = (price2-price1)*100/price1;
		double percearn23 = (earn3-earn2)*100/earn2; 
		double percrev23 =(rev3-rev2)*100/rev2; 
		double percp23 = (price3-price2)*100/price2;
		double percearn13 = (earn3-earn1)*100/earn1; 
		double percrev13 =(rev3-rev1)*100/rev1; 
		double percp13 = (price3-price1)*100/price1;
		
		double priceinearn12 = percp12-percearn12;
		double priceinearn23 = percp23-percearn23;
		double priceinearn13 = percp13-percearn13;
		
		double diffearn = priceinearn23-priceinearn12;
		
		double priceinrev12 = percp12-percrev12;
		double priceinrev23 = percp23-percrev23;
		double priceinrev13 = percp13-percrev13;
		
		double diffrev = priceinrev23-priceinrev12;
		
		double avg = (priceinearn13+priceinrev13)/2;
		
		double mult = (diffearn+diffrev)/200;
		
		index = avg*(1+mult);
		
		return index;
	}
	
	public double rating(double rating) {
		return 25.00*(5-rating);
	}
	
	public double technicals(double fifDay, double twoDay, double RSI5, double RSI14, double RSI30, double stoch) {
		double index = 0.0;
		double percabove = (twoDay-fifDay)*100/twoDay;
		double RSIavg = RSI5*0.3+RSI14*0.4+RSI30*0.3;
		double inRSI = 100-RSIavg;
		double stochI = 100-stoch;
		index = percabove*0.3+inRSI*0.5+stochI*0.2;
		return index;
	}
	
	public double findind(double EBITDA, double rev, double mcap, double cash, double debt, double mult, double pEVEBITDA, double allEVEBITDA, double ps, double evs, double earn1, double earn2, double earn3, double rev1, double rev2, double rev3, double price1, double price2, double price3, double rating, double fifDay, double twoDay, double RSI5, double RSI14, double RSI30, double stoch) {
		double index=0.0;
		double infin = financials(EBITDA, rev, mcap, cash, debt, mult, pEVEBITDA, allEVEBITDA, ps, evs);
		double inprice = pricedin(earn1, earn2, earn3, rev1, rev2, rev3, price1, price2, price3);
		double inrat = rating(rating);
		double intech = technicals(fifDay, twoDay, RSI5, RSI14, RSI30, stoch);
		
		index = infin*0.25+inprice*0.25+inrat*0.25+intech*0.25;
		return index;
	}


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		options O = new options();
		double strike = 35.00;
		double price = 1.89;
		double curr=34.45;
		int days = 20;
		O.avgP(strike, price, curr, days);
		O.avgC(strike,price,curr, days);
		HashMap<String, double[]> Ticker = new HashMap<>();
		// goes in the order of EBITDA, Revenue, Market Cap, Cash, Debt, debt multiplier, earn1, earn2, earn3, rev1, rev2, rev3, price1, price2, price3, rating, 50 day moving avg, 200 day moving avg, 5 day RSI, 30 day RSI, stochiometrics, operating margin
		double EBITDA =0.0;
		double EBITDA1k = EBITDA*1000;
		double Revenue = 0.0;
		double Revenue1k = Revenue*1000;
		double marketC = 0.0;
		double cash =0.0;
		double debt =0.0;
		double debtMult=1.25;
		double earn1 = 0.0;
		double earn2 = 0.0;
		double earn3 =0.0;
		double rev1=0.0;
		double rev2 = 0.0;
		double rev3 = 0.0;
		double price1 = 0.0;
		double price2 = 0.0;
		double price3= 0.0;
		double rating =0.0;
		double FiftyDay =0.0;
		double TwoHundredDay= 0.0;
		double RSI5 = 0.0;
		double RSI14=0.0;
		double RSI30=0.0;
		double stoch = 0.0;
		double operate =0.0;
		
		double[] val1 = new double[23];
		EBITDA = 1.3;
		EBITDA1k = EBITDA*1000;
		Revenue = 5.2;
		Revenue1k = Revenue*1000;
		marketC = 13.5;
		operate = 14.01;
		cash= 6.2;
		debt= 4.5;
		debtMult = 1.25;
		earn1 = 0.45;
		earn2 = 0.55;
		earn3 = 0.65;
		rev1 = 1.6;
		rev2 = 1.7;
		rev3 = 1.8;
		price1 = 54.56;
		price2 = 59.25;
		price3 = 62.34;
		rating =2.3;
		FiftyDay = 61.45;
		TwoHundredDay = 60.89;
		RSI5 =54;
		RSI14 = 57;
		RSI30 = 43;
		stoch = 35;

		val1[0] = EBITDA1k;
		val1[1] = Revenue1k;
		val1[2] = marketC;
		val1[3] = operate;
		val1[4] = cash;
		val1[5] = debt;
		val1[6] = debtMult;
		val1[7] = earn1;
		val1[8] = earn2;
		val1[9] = earn3;
		val1[10] = rev1;
		val1[11] = rev2;
		val1[12] = rev3;
		val1[13] = price1;
		val1[14] = price2;
		val1[15] = price3;
		val1[16] = rating;
		val1[17] = FiftyDay;
		val1[18] = TwoHundredDay;
		val1[19] = RSI5;
		val1[20] = RSI14;
		val1[21] = RSI30;
		val1[22] = stoch;
			
		Ticker.put("ABC", val1);
		
		/*
		double[] val1 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val1[0] = EBITDA1k;
		val1[1] = Revenue1k;
		val1[2] = marketC;
		val1[3] = operate;
		val1[4] = cash;
		val1[5] = debt;
		val1[6] = debtMult;
		val1[7] = earn1;
		val1[8] = earn2;
		val1[9] = earn3;
		val1[10] = rev1;
		val1[11] = rev2;
		val1[12] = rev3;
		val1[13] = price1;
		val1[14] = price2;
		val1[15] = price3;
		val1[16] = rating;
		val1[17] = FiftyDay;
		val1[18] = TwoHundredDay;
		val1[19] = RSI5;
		val1[20] = RSI14;
		val1[21] = RSI30;
		val1[22] = stoch;
			
		Ticker.put("DT", val1[]);
		
		double[] val2 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val2[0] = EBITDA1k;
		val2[1] = Revenue1k;
		val2[2] = marketC;
		val2[3] = operate;
		val2[4] = cash;
		val2[5] = debt;
		val2[6] = debtMult;
		val2[7] = earn1;
		val2[8] = earn2;
		val2[9] = earn3;
		val2[10] = rev1;
		val2[11] = rev2;
		val2[12] = rev3;
		val2[13] = price1;
		val2[14] = price2;
		val2[15] = price3;
		val2[16] = rating;
		val2[17] = FiftyDay;
		val2[18] = TwoHundredDay;
		val2[19] = RSI5;
		val2[20] = RSI14;
		val2[21] = RSI30;
		val2[22] = stoch;
		Ticker.put("WDAY", val2[]);
		
		double[] val3 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val3[0] = EBITDA1k;
		val3[1] = Revenue1k;
		val3[2] = marketC;
		val3[3] = operate;
		val3[4] = cash;
		val3[5] = debt;
		val3[6] = debtMult;
		val3[7] = earn1;
		val3[8] = earn2;
		val3[9] = earn3;
		val3[10] = rev1;
		val3[11] = rev2;
		val3[12] = rev3;
		val3[13] = price1;
		val3[14] = price2;
		val3[15] = price3;
		val3[16] = rating;
		val3[17] = FiftyDay;
		val3[18] = TwoHundredDay;
		val3[19] = RSI5;
		val3[20] = RSI14;
		val3[21] = RSI30;
		val3[22] = stoch;
		Ticker.put("MU", val3[]);
		
		double[] val4 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val4[0] = EBITDA1k;
		val4[1] = Revenue1k;
		val4[2] = marketC;
		val4[3] = operate;
		val4[4] = cash;
		val4[5] = debt;
		val4[6] = debtMult;
		val4[7] = earn1;
		val4[8] = earn2;
		val4[9] = earn3;
		val4[10] = rev1;
		val4[11] = rev2;
		val4[12] = rev3;
		val4[13] = price1;
		val4[14] = price2;
		val4[15] = price3;
		val4[16] = rating;
		val4[17] = FiftyDay;
		val4[18] = TwoHundredDay;
		val4[19] = RSI5;
		val4[20] = RSI14;
		val4[21] = RSI30;
		val4[22] = stoch;
		Ticker.put("AI", val4[]);
		
		double[] val5 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val5[0] = EBITDA1k;
		val5[1] = Revenue1k;
		val5[2] = marketC;
		val5[3] = operate;
		val5[4] = cash;
		val5[5] = debt;
		val5[6] = debtMult;
		val5[7] = earn1;
		val5[8] = earn2;
		val5[9] = earn3;
		val5[10] = rev1;
		val5[11] = rev2;
		val5[12] = rev3;
		val5[13] = price1;
		val5[14] = price2;
		val5[15] = price3;
		val5[16] = rating;
		val5[17] = FiftyDay;
		val5[18] = TwoHundredDay;
		val5[19] = RSI5;
		val5[20] = RSI14;
		val5[21] = RSI30;
		val5[22] = stoch;
		Ticker.put("AYX", va5[]);
		
		double[] val6 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val6[0] = EBITDA1k;
		val6[1] = Revenue1k;
		val6[2] = marketC;
		val6[3] = operate;
		val6[4] = cash;
		val6[5] = debt;
		val6[6] = debtMult;
		val6[7] = earn1;
		val6[8] = earn2;
		val6[9] = earn3;
		val6[10] = rev1;
		val6[11] = rev2;
		val6[12] = rev3;
		val6[13] = price1;
		val6[14] = price2;
		val6[15] = price3;
		val6[16] = rating;
		val6[17] = FiftyDay;
		val6[18] = TwoHundredDay;
		val6[19] = RSI5;
		val6[20] = RSI14;
		val6[21] = RSI30;
		val6[22] = stoch;
		Ticker.put("TDY", val6[]);
		
		double[] val7 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val7[0] = EBITDA1k;
		val7[1] = Revenue1k;
		val7[2] = marketC;
		val7[3] = operate;
		val7[4] = cash;
		val7[5] = debt;
		val7[6] = debtMult;
		val7[7] = earn1;
		val7[8] = earn2;
		val7[9] = earn3;
		val7[10] = rev1;
		val7[11] = rev2;
		val7[12] = rev3;
		val7[13] = price1;
		val7[14] = price2;
		val7[15] = price3;
		val7[16] = rating;
		val7[17] = FiftyDay;
		val7[18] = TwoHundredDay;
		val7[19] = RSI5;
		val7[20] = RSI14;
		val7[21] = RSI30;
		val7[22] = stoch;
		Ticker.put("BRKR", val7[]);
		
		double[] val8 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val8[0] = EBITDA1k;
		val8[1] = Revenue1k;
		val8[2] = marketC;
		val8[3] = operate;
		val8[4] = cash;
		val8[5] = debt;
		val8[6] = debtMult;
		val8[7] = earn1;
		val8[8] = earn2;
		val8[9] = earn3;
		val8[10] = rev1;
		val8[11] = rev2;
		val8[12] = rev3;
		val8[13] = price1;
		val8[14] = price2;
		val8[15] = price3;
		val8[16] = rating;
		val8[17] = FiftyDay;
		val8[18] = TwoHundredDay;
		val8[19] = RSI5;
		val8[20] = RSI14;
		val8[21] = RSI30;
		val8[22] = stoch;
		Ticker.put("VG", val8[]);
		
		double[] val9 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val9[0] = EBITDA1k;
		val9[1] = Revenue1k;
		val9[2] = marketC;
		val9[3] = operate;
		val9[4] = cash;
		val9[5] = debt;
		val9[6] = debtMult;
		val9[7] = earn1;
		val9[8] = earn2;
		val9[9] = earn3;
		val9[10] = rev1;
		val9[11] = rev2;
		val9[12] = rev3;
		val9[13] = price1;
		val9[14] = price2;
		val9[15] = price3;
		val9[16] = rating;
		val9[17] = FiftyDay;
		val9[18] = TwoHundredDay;
		val9[19] = RSI5;
		val9[20] = RSI14;
		val9[21] = RSI30;
		val9[22] = stoch;
		Ticker.put("ABB", val9[]);
		
		double[] val10 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val10[0] = EBITDA1k;
		val10[1] = Revenue1k;
		val10[2] = marketC;
		val10[3] = operate;
		val10[4] = cash;
		val10[5] = debt;
		val10[6] = debtMult;
		val10[7] = earn1;
		val10[8] = earn2;
		val10[9] = earn3;
		val10[10] = rev1;
		val10[11] = rev2;
		val10[12] = rev3;
		val10[13] = price1;
		val10[14] = price2;
		val10[15] = price3;
		val10[16] = rating;
		val10[17] = FiftyDay;
		val10[18] = TwoHundredDay;
		val10[19] = RSI5;
		val10[20] = RSI14;
		val10[21] = RSI30;
		val10[22] = stoch;
		Ticker.put("ISRG", val10[]);
		
		double[] val11 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val11[0] = EBITDA1k;
		val11[1] = Revenue1k;
		val11[2] = marketC;
		val11[3] = operate;
		val11[4] = cash;
		val11[5] = debt;
		val11[6] = debtMult;
		val11[7] = earn1;
		val11[8] = earn2;
		val11[9] = earn3;
		val11[10] = rev1;
		val11[11] = rev2;
		val11[12] = rev3;
		val11[13] = price1;
		val11[14] = price2;
		val11[15] = price3;
		val11[16] = rating;
		val11[17] = FiftyDay;
		val11[18] = TwoHundredDay;
		val11[19] = RSI5;
		val11[20] = RSI14;
		val11[21] = RSI30;
		val11[22] = stoch;
		Ticker.put("IRTC", val11[]);
		
		double[] val12 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val12[0] = EBITDA1k;
		val12[1] = Revenue1k;
		val12[2] = marketC;
		val12[3] = operate;
		val12[4] = cash;
		val12[5] = debt;
		val12[6] = debtMult;
		val12[7] = earn1;
		val12[8] = earn2;
		val12[9] = earn3;
		val12[10] = rev1;
		val12[11] = rev2;
		val12[12] = rev3;
		val12[13] = price1;
		val12[14] = price2;
		val12[15] = price3;
		val12[16] = rating;
		val12[17] = FiftyDay;
		val12[18] = TwoHundredDay;
		val12[19] = RSI5;
		val12[20] = RSI14;
		val12[21] = RSI30;
		val12[22] = stoch;
		Ticker.put("SQ", val12[]);
		
		double[] val13 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val13[0] = EBITDA1k;
		val13[1] = Revenue1k;
		val13[2] = marketC;
		val13[3] = operate;
		val13[4] = cash;
		val13[5] = debt;
		val13[6] = debtMult;
		val13[7] = earn1;
		val13[8] = earn2;
		val13[9] = earn3;
		val13[10] = rev1;
		val13[11] = rev2;
		val13[12] = rev3;
		val13[13] = price1;
		val13[14] = price2;
		val13[15] = price3;
		val13[16] = rating;
		val13[17] = FiftyDay;
		val13[18] = TwoHundredDay;
		val13[19] = RSI5;
		val13[20] = RSI14;
		val13[21] = RSI30;
		val13[22] = stoch;
		Ticker.put("ZI", val13[]);
		
		double[] val14 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val14[0] = EBITDA1k;
		val14[1] = Revenue1k;
		val14[2] = marketC;
		val14[3] = operate;
		val14[4] = cash;
		val14[5] = debt;
		val14[6] = debtMult;
		val14[7] = earn1;
		val14[8] = earn2;
		val14[9] = earn3;
		val14[10] = rev1;
		val14[11] = rev2;
		val14[12] = rev3;
		val14[13] = price1;
		val14[14] = price2;
		val14[15] = price3;
		val14[16] = rating;
		val14[17] = FiftyDay;
		val14[18] = TwoHundredDay;
		val14[19] = RSI5;
		val14[20] = RSI14;
		val14[21] = RSI30;
		val14[22] = stoch;
		Ticker.put("ACN", val14[]);
		
		double[] val15 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val15[0] = EBITDA1k;
		val15[1] = Revenue1k;
		val15[2] = marketC;
		val15[3] = operate;
		val15[4] = cash;
		val15[5] = debt;
		val15[6] = debtMult;
		val15[7] = earn1;
		val15[8] = earn2;
		val15[9] = earn3;
		val15[10] = rev1;
		val15[11] = rev2;
		val15[12] = rev3;
		val15[13] = price1;
		val15[14] = price2;
		val15[15] = price3;
		val15[16] = rating;
		val15[17] = FiftyDay;
		val15[18] = TwoHundredDay;
		val15[19] = RSI5;
		val15[20] = RSI14;
		val15[21] = RSI30;
		val15[22] = stoch;
		Ticker.put("EPAM", val15[]);
		
		double[] val16 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val16[0] = EBITDA1k;
		val16[1] = Revenue1k;
		val16[2] = marketC;
		val16[3] = operate;
		val16[4] = cash;
		val16[5] = debt;
		val16[6] = debtMult;
		val16[7] = earn1;
		val16[8] = earn2;
		val16[9] = earn3;
		val16[10] = rev1;
		val16[11] = rev2;
		val16[12] = rev3;
		val16[13] = price1;
		val16[14] = price2;
		val16[15] = price3;
		val16[16] = rating;
		val16[17] = FiftyDay;
		val16[18] = TwoHundredDay;
		val16[19] = RSI5;
		val16[20] = RSI14;
		val16[21] = RSI30;
		val16[22] = stoch;
		Ticker.put("ZEN", val16[]);
		
		double[] val17 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val17[0] = EBITDA1k;
		val17[1] = Revenue1k;
		val17[2] = marketC;
		val17[3] = operate;
		val17[4] = cash;
		val17[5] = debt;
		val17[6] = debtMult;
		val17[7] = earn1;
		val17[8] = earn2;
		val17[9] = earn3;
		val17[10] = rev1;
		val17[11] = rev2;
		val17[12] = rev3;
		val17[13] = price1;
		val17[14] = price2;
		val17[15] = price3;
		val17[16] = rating;
		val17[17] = FiftyDay;
		val17[18] = TwoHundredDay;
		val17[19] = RSI5;
		val17[20] = RSI14;
		val17[21] = RSI30;
		val17[22] = stoch;
		Ticker.put("COUP", val17[]);
		
		double[] val18 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val18[0] = EBITDA1k;
		val18[1] = Revenue1k;
		val18[2] = marketC;
		val18[3] = operate;
		val18[4] = cash;
		val18[5] = debt;
		val18[6] = debtMult;
		val18[7] = earn1;
		val18[8] = earn2;
		val18[9] = earn3;
		val18[10] = rev1;
		val18[11] = rev2;
		val18[12] = rev3;
		val18[13] = price1;
		val18[14] = price2;
		val18[15] = price3;
		val18[16] = rating;
		val18[17] = FiftyDay;
		val18[18] = TwoHundredDay;
		val18[19] = RSI5;
		val18[20] = RSI14;
		val18[21] = RSI30;
		val18[22] = stoch;
		Ticker.put("LDOS", val18[]);
		
		double[] val19 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val19[0] = EBITDA1k;
		val19[1] = Revenue1k;
		val19[2] = marketC;
		val19[3] = operate;
		val19[4] = cash;
		val19[5] = debt;
		val19[6] = debtMult;
		val19[7] = earn1;
		val19[8] = earn2;
		val19[9] = earn3;
		val19[10] = rev1;
		val19[11] = rev2;
		val19[12] = rev3;
		val19[13] = price1;
		val19[14] = price2;
		val19[15] = price3;
		val19[16] = rating;
		val19[17] = FiftyDay;
		val19[18] = TwoHundredDay;
		val19[19] = RSI5;
		val19[20] = RSI14;
		val19[21] = RSI30;
		val19[22] = stoch;
		Ticker.put("PANW", val19[]);
		
		double[] val20 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val20[0] = EBITDA1k;
		val20[1] = Revenue1k;
		val20[2] = marketC;
		val20[3] = operate;
		val20[4] = cash;
		val20[5] = debt;
		val20[6] = debtMult;
		val20[7] = earn1;
		val20[8] = earn2;
		val20[9] = earn3;
		val20[10] = rev1;
		val20[11] = rev2;
		val20[12] = rev3;
		val20[13] = price1;
		val20[14] = price2;
		val20[15] = price3;
		val20[16] = rating;
		val20[17] = FiftyDay;
		val20[18] = TwoHundredDay;
		val20[19] = RSI5;
		val20[20] = RSI14;
		val20[21] = RSI30;
		val20[22] = stoch;
		Ticker.put("DRKTF", val20[]);
		
		double[] val21 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val21[0] = EBITDA1k;
		val21[1] = Revenue1k;
		val21[2] = marketC;
		val21[3] = operate;
		val21[4] = cash;
		val21[5] = debt;
		val21[6] = debtMult;
		val21[7] = earn1;
		val21[8] = earn2;
		val21[9] = earn3;
		val21[10] = rev1;
		val21[11] = rev2;
		val21[12] = rev3;
		val21[13] = price1;
		val21[14] = price2;
		val21[15] = price3;
		val21[16] = rating;
		val21[17] = FiftyDay;
		val21[18] = TwoHundredDay;
		val21[19] = RSI5;
		val21[20] = RSI14;
		val21[21] = RSI30;
		val21[22] = stoch;
		Ticker.put("ZS", val21[]);
		
		double[] val22 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val22[0] = EBITDA1k;
		val22[1] = Revenue1k;
		val22[2] = marketC;
		val22[3] = operate;
		val22[4] = cash;
		val22[5] = debt;
		val22[6] = debtMult;
		val22[7] = earn1;
		val22[8] = earn2;
		val22[9] = earn3;
		val22[10] = rev1;
		val22[11] = rev2;
		val22[12] = rev3;
		val22[13] = price1;
		val22[14] = price2;
		val22[15] = price3;
		val22[16] = rating;
		val22[17] = FiftyDay;
		val22[18] = TwoHundredDay;
		val22[19] = RSI5;
		val22[20] = RSI14;
		val22[21] = RSI30;
		val22[22] = stoch;
		Ticker.put("NET", val22[]);
		
		double[] val23 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val23[0] = EBITDA1k;
		val23[1] = Revenue1k;
		val23[2] = marketC;
		val23[3] = operate;
		val23[4] = cash;
		val23[5] = debt;
		val23[6] = debtMult;
		val23[7] = earn1;
		val23[8] = earn2;
		val23[9] = earn3;
		val23[10] = rev1;
		val23[11] = rev2;
		val23[12] = rev3;
		val23[13] = price1;
		val23[14] = price2;
		val23[15] = price3;
		val23[16] = rating;
		val23[17] = FiftyDay;
		val23[18] = TwoHundredDay;
		val23[19] = RSI5;
		val23[20] = RSI14;
		val23[21] = RSI30;
		val23[22] = stoch;
		Ticker.put("OKTA", val23[]);
		
		double[] val24 = new double[22];
		EBITDA = ;
		EBITDA1k = EBITDA*1000;
		Revenue = ;
		Revenue1k = ;
		marketC = ;
		operate = ;
		cash=;
		debt=;
		debtMult = 1.25;
		earn1 = ;
		earn2 = ;
		earn3 = ;
		rev1 = ;
		rev2 = ;
		rev3 = ;
		price1 = ;
		price2 = ;
		price3 = ;
		rating =;
		FiftyDay = ;
		TwoHundredDay = ;
		RSI5 =;
		RSI14 = ;
		RSI30 = ;
		stoch = ;

		val24[0] = EBITDA1k;
		val24[1] = Revenue1k;
		val24[2] = marketC;
		val24[3] = operate;
		val24[4] = cash;
		val24[5] = debt;
		val24[6] = debtMult;
		val24[7] = earn1;
		val24[8] = earn2;
		val24[9] = earn3;
		val24[10] = rev1;
		val24[11] = rev2;
		val24[12] = rev3;
		val24[13] = price1;
		val24[14] = price2;
		val24[15] = price3;
		val24[16] = rating;
		val24[17] = FiftyDay;
		val24[18] = TwoHundredDay;
		val24[19] = RSI5;
		val24[20] = RSI14;
		val24[21] = RSI30;
		val24[22] = stoch;
		Ticker.put("FTNT", val24[]);

		*/
		
		
		HashMap<String, double[]> multiples = new HashMap<>();
		
		double posEBITDA =0.0;
		double allEBITDA = 0.0;
		double p_s = 0.0;
		double EV_s =0.0;
		double opmarg = 0.0;
		
		double[] mult1 = new double[5];
		
		posEBITDA = 12.54;
		allEBITDA=13.45;
		p_s = 3.34;
		EV_s = 6.54;
		opmarg = 15.54;
		mult1[0]=posEBITDA;
		mult1[1] =allEBITDA ;
		mult1[2] =p_s ;
		mult1[3] =EV_s ;
		mult1[4] = opmarg;
		
		multiples.put("Industry1", mult1);
		
		double[] mult2 = new double[5];
		
		posEBITDA = 14.54;
		allEBITDA=17.45;
		p_s = 3.84;
		EV_s = 6.94;
		opmarg = 19.54;
		mult2[0]=posEBITDA;
		mult2[1] =allEBITDA ;
		mult2[2] =p_s ;
		mult2[3] =EV_s ;
		mult2[4] = opmarg;
		
		multiples.put("Industry2", mult2);
		/*
		double[] mult21 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult[0]=posEBITDA;
		mult[1] =allEBITDA ;
		mult[2] =p_s ;
		mult[3] =EV_s ;
		mult[4] = opmarg;
		
		multiples.put("Computer Services", mult21[]);
		
		double[] mult21 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult[0]=posEBITDA;
		mult[1] =allEBITDA ;
		mult[2] =p_s ;
		mult[3] =EV_s ;
		mult[4] = opmarg;
		multiples.put("Computer Peripherals", mult22[]);
		
		double[] mult28 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult28[0]=posEBITDA;
		mult28[1] =allEBITDA ;
		mult28[2] =p_s ;
		mult28[3] =EV_s ;
		mult28[4] = opmarg;
		multiples.put("Electrical Equipment", mult28[]);
		
		double[] mult29 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult29[0]=posEBITDA;
		mult29[1] =allEBITDA ;
		mult29[2] =p_s ;
		mult29[3] =EV_s ;
		mult29[4] = opmarg;
		multiples.put("Electrical Consumer/Office", mult29[]);
		
		double[] mult30 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult30[0]=posEBITDA;
		mult30[1] =allEBITDA ;
		mult30[2] =p_s ;
		mult30[3] =EV_s ;
		mult30[4] = opmarg;
		multiples.put("Electrical General", mult30[]);
		
		double[] mult42 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult42[0]=posEBITDA;
		mult42[1] =allEBITDA ;
		mult42[2] =p_s ;
		mult42[3] =EV_s ;
		mult42[4] = opmarg;
		multiples.put("Healthcare IT", mult42[]);
		
		double[] mult47 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult47[0]=posEBITDA;
		mult47[1] =allEBITDA ;
		mult47[2] =p_s ;
		mult47[3] =EV_s ;
		mult47[4] = opmarg;
		multiples.put("Information Services", mult47[]);
		
		double[] mult52 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult52[0]=posEBITDA;
		mult52[1] =allEBITDA ;
		mult52[2] =p_s ;
		mult52[3] =EV_s ;
		mult52[4] = opmarg;
		multiples.put("Machinery", mult52[]);
		
		double[] mult74 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult74[0]=posEBITDA;
		mult74[1] =allEBITDA ;
		mult74[2] =p_s ;
		mult74[3] =EV_s ;
		mult74[4] = opmarg;
		multiples.put("Retail Online", mult74[]);
		
		double[] mult77 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult77[0]=posEBITDA;
		mult77[1] =allEBITDA ;
		mult77[2] =p_s ;
		mult77[3] =EV_s ;
		mult77[4] = opmarg;
		multiples.put("Semiconductors", mult77[]);
		
		double[] mult80 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult80[0]=posEBITDA;
		mult80[1] =allEBITDA ;
		mult80[2] =p_s ;
		mult80[3] =EV_s ;
		mult80[4] = opmarg;
		multiples.put("Software Entertainment", mult80[]);
		
		double[] mult81 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult81[0]=posEBITDA;
		mult81[1] =allEBITDA ;
		mult81[2] =p_s ;
		mult81[3] =EV_s ;
		mult81[4] = opmarg;
		multiples.put("Software Internet", mult81[]);
		
		double[] mult82 = new double[5];
		posEBITDA = ;
		allEBITDA = ;
		p_s = ;
		EV_s = ;
		opmarg = ;
		
		mult82[0]=posEBITDA;
		mult82[1] =allEBITDA ;
		mult82[2] =p_s ;
		mult82[3] =EV_s ;
		mult82[4] = opmarg;
		multiples.put("Software System" , mult82[]);

		*/
		HashMap<String, double[]> Ticker_to_multiple = new HashMap<>();
		
		double posEBITDAtick =0.0;
		double allEBITDAtick = 0.0;
		double p_stick = 0.0;
		double EV_stick =0.0;
		double opmargtick = 0.0;
		
		double[] mult11 = new double[5];
		
		
		double[] tickmult1 = multiples.get("Industry1");
		double[] tickmult2 = multiples.get("Industry2");
		for(int i=0; i<5; i++) {
			mult11[i] = tickmult1[i]*0.4+tickmult2[i]*0.6;
		}
		
		double index1 = O.findind(EBITDA1k, Revenue1k, marketC, cash, debt, debtMult, posEBITDAtick, allEBITDAtick, p_stick, EV_stick, earn1, earn2, earn3, rev1, rev2, rev3, price1, price2, price3, rating, FiftyDay, TwoHundredDay, RSI5, RSI14, RSI30, stoch);
		System.out.println(index1);
		
		

		

	}

}
